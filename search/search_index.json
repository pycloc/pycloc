{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pycloc","text":"<p>Python wrapper for the <code>cloc</code> (Count Lines of Code) command-line tool. This library provides a convenient, Pythonic interface to the powerful static analysis tool, enabling you to count lines of code directly from your Python applications with comprehensive error handling and dynamic configuration.</p> <p>Warning</p> <p>This library is currently in Alpha. APIs and core features may change without notice based on community feedback and requests. Documentation may be incomplete or outdated, and you should expect bugs and missing functionalities.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Platform Agnostic: Can run on any operating system out: macOS, Linux and Windows;</li> <li>Zero Dependencies: No third-party Python dependencies, only requiring the Perl interpreter;</li> <li>Dynamic Configuration: Set CLI tool flags as Python attributes with automatic conversion;</li> <li>Comprehensive Error Handling: Custom exception hierarchy for different error scenarios;</li> <li>Type Safety: Full type annotations for better IDE support and code quality.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python: 3.10+</li> <li>Perl: 5.6.1+ (required for <code>cloc</code> execution)</li> </ul> <p>Note</p> <p>Since <code>cloc</code> is written in Perl, you must ensure that the interpreter is installed and available in your system's <code>PATH</code>. This should work out of the box on most Unix-like systems, but may require additional setup on minimalistic Linux distros or Windows.</p>"},{"location":"#installation","title":"Installation","text":"<p>To include the package in your project, run the following:</p> pippdmpoetryuv <pre><code>pip install pycloc\n</code></pre> <pre><code>pdm add pycloc\n</code></pre> <pre><code>poetry add pycloc\n</code></pre> <pre><code>uv add pycloc\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>The following is a basic usage example of the library:</p> example.py<pre><code>import json\nfrom pathlib import Path\n\nfrom pycloc import CLOC\n\nworkdir = Path(\"directory\", \"of\", \"your\", \"choice\")\n\ncloc = CLOC(\n    workdir=workdir,\n    timeout=30,  # (1)!\n    json=True,  # (2)!\n)\n\ncloc.max_file_size = 5  # (3)!\n\n\ndef main():\n    output = cloc(\".\", by_file=True)  # (4)!\n    result = json.loads(output)\n    pretty = json.dumps(result, indent=4)\n    print(pretty)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li>Configurations can be supplied within the command constructor.    Types such as <code>int</code>, <code>byte</code> or <code>Path</code> are stringified.    This example is equivalent to passing <code>--timeout=30</code> in CLI.</li> <li>Flags of type <code>bool</code> are serialized as on/off flags: <code>flag_name=True</code>    is serialized as <code>--flag-name</code>, while <code>False</code> values are omitted entirely.</li> <li>Configurations can also be specified through attribute setters.    Note that specifying configurations this way will modify the instance.</li> <li>Runs the command!    You can also specify additional configurations prior to execution.    Note that configurations applied this way do not modify the instance.</li> </ol> <p>For asynchronous execution, enable the dedicated flag before calling the command:</p> <pre><code>await cloc(..., asynchronous=True)\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>This guide will explain how to set the project up locally and make code contributions.</p>"},{"location":"contributing/#requirements","title":"Requirements","text":"<p>For local development, you will need:</p> <ul> <li><code>uv</code> package manager;</li> <li><code>just</code> command runner.</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Having ensured that all software requirements are met, it's enough to:</p> <pre><code>just setup\n</code></pre> <p>This will:</p> <ul> <li>Download a standalone build of Python;</li> <li>Create a virtual environment with seed packages;</li> <li>Install all development dependencies;</li> <li>Install <code>pre-commit</code> hooks.</li> </ul> <p>And just like that, you're ready to code!</p>"},{"location":"contributing/#testing-changes","title":"Testing Changes","text":"<p>To test your code changes, you can:</p> <pre><code>just test\n</code></pre>"},{"location":"contributing/#generating-documentation","title":"Generating Documentation","text":"<p>To generate these pages from their respective Markdown sources, you would:</p> <pre><code>just build-documentation\n</code></pre> <p>If you are developing locally and would like real-time updates while changing content, then:</p> <pre><code>just serve-documentation\n</code></pre>"},{"location":"api/summary/","title":"Summary","text":"<ul> <li>pycloc<ul> <li>command</li> <li>exceptions</li> </ul> </li> </ul>"},{"location":"api/pycloc/command/","title":"command","text":"<p>Core classes used for interfacing with <code>cloc</code>.</p> <p>Classes:</p> Name Description <code>CLOC</code> <p>Provides a convenient interface to create and execute <code>cloc</code> commands.</p>"},{"location":"api/pycloc/command/#pycloc.command.CLOC","title":"<code>CLOC</code>","text":"<p>Provides a convenient interface to create and execute <code>cloc</code> commands with dynamic flag handling and proper error management. Flags can be set as attributes or passed during initialization and execution.</p> <p>Parameters:</p> Name Type Description Default <code>workdir</code> <code>Optional[AnyPath]</code> <p>Optional working directory for executing the command.</p> <code>None</code> <code>encoding</code> <code>Optional[str]</code> <p>Optional text encoding for parsing output.</p> <code>None</code> <code>errors</code> <code>Optional[str]</code> <p>Optional error handling strategy for encoding issues.</p> <code>None</code> <code>**flags</code> <code>FlagValue</code> <p>Initial set of command-line flags that will be applied.</p> <code>{}</code> Source code in <code>src/pycloc/command.py</code> <pre><code>class CLOC:\n    \"\"\"\n    Provides a convenient interface to create and execute ``cloc``\n    commands with dynamic flag handling and proper error management.\n    Flags can be set as attributes or passed during initialization and execution.\n\n    Args:\n        workdir: Optional working directory for executing the command.\n        encoding: Optional text encoding for parsing output.\n        errors: Optional error handling strategy for encoding issues.\n        **flags: Initial set of command-line flags that will be applied.\n    \"\"\"\n\n    __version__ = properties.version\n    \"\"\"Current version of ``cloc``.\"\"\"\n\n    def __init__(\n        self,\n        *,\n        workdir: Optional[AnyPath] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = None,\n        **flags: FlagValue,\n    ):\n        self._workdir: Optional[AnyPath] = workdir\n        self._encoding: Optional[str] = encoding\n        self._errors: Optional[str] = errors\n        self._flags: Flags = flags\n\n    @property\n    def workdir(self) -&gt; Optional[AnyPath]:\n        return self._workdir\n\n    @workdir.setter\n    def workdir(self, value: Optional[AnyPath]):\n        self._workdir = value\n\n    @property\n    def encoding(self) -&gt; Optional[str]:\n        return self._encoding\n\n    @encoding.setter\n    def encoding(self, value: Optional[str]):\n        self._encoding = value\n\n    @property\n    def errors(self) -&gt; Optional[str]:\n        return self._errors\n\n    @errors.setter\n    def errors(self, value: Optional[str]):\n        self._errors = value\n\n    def __delattr__(self, name: str):\n        del self._flags[name]\n\n    def __getattr__(self, name: str) -&gt; FlagValue:\n        return self._flags[name]\n\n    def __setattr__(self, name: str, value: FlagValue):\n        if is_property(self, name) or name.startswith(\"_\"):\n            super().__setattr__(name, value)\n        else:\n            self._flags[name] = value\n\n    @overload\n    def __call__(\n        self,\n        argument: AnyPath,\n        /,\n        *arguments: AnyPath,\n        asynchronous: Literal[False] = False,\n        workdir: Optional[AnyPath] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = None,\n        **flags: FlagValue,\n    ) -&gt; str: ...\n\n    @overload\n    async def __call__(\n        self,\n        argument: AnyPath,\n        /,\n        *arguments: AnyPath,\n        asynchronous: Literal[True] = True,\n        workdir: Optional[AnyPath] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = None,\n        **flags: FlagValue,\n    ) -&gt; str: ...\n\n    def __call__(\n        self,\n        argument: AnyPath,\n        /,\n        *arguments: AnyPath,\n        asynchronous: bool = False,\n        workdir: Optional[AnyPath] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = None,\n        **flags: FlagValue,\n    ) -&gt; CommandOutput:\n        \"\"\"\n        Execute ``cloc`` command with the specified arguments and flags.\n\n        Args:\n            argument: Required positional argument to pass to the command.\n            *arguments: Additional positional arguments to pass to the command.\n            asynchronous: Whether to execute the command asynchronously.\n            workdir: Optional working directory for this execution.\n            encoding: Optional text encoding for parsing output.\n            errors: Optional error handling strategy for encoding issues.\n            **flags: Additional command-line flags for this execution only.\n\n        Returns:\n            Output from the ``cloc`` command, either as a string or as an ``Awaitable`` string.\n\n        Note:\n            Warning messages from the output are logged but will not result in a raised exception.\n\n        Raises:\n            CLOCDependencyError: If [Perl](https://www.perl.org) is not available on the system.\n            CLOCCommandError: If the ``cloc`` command fails or returns non-zero exit code.\n\n        Examples:\n            &gt;&gt;&gt; import json\n            &gt;&gt;&gt; from tempfile import NamedTemporaryFile\n            &gt;&gt;&gt; from pycloc import CLOC\n            &gt;&gt;&gt; with NamedTemporaryFile(suffix=\".md\", mode=\"w\") as buffer:\n            ...     _ = buffer.write(\"Hello, CLOC!\")\n            ...     buffer.flush()\n            ...     cloc = CLOC(json=True)\n            ...     output = cloc(buffer.name)\n            ...     result = json.loads(output)\n            ...     result[\"Markdown\"][\"code\"]\n            1\n        \"\"\"\n        if not perl():\n            raise CLOCDependencyError(\"Perl is not available!\")\n        try:\n            return run(\n                executable=script(),\n                cwd=(self.workdir or workdir),\n                arguments=[argument, *arguments],\n                flags=(self._flags.copy() | flags).items(),\n                encoding=(self.encoding or encoding),\n                errors=(self.errors or errors),\n                asynchronous=asynchronous,\n            )\n        except CalledProcessError as ex:\n            raise CLOCCommandError(\n                cmd=ex.cmd,\n                returncode=ex.returncode,\n                output=ex.output,\n                stderr=ex.stderr,\n            ) from None\n        except (\n            FileNotFoundError,\n            PermissionError,\n        ) as ex:\n            raise CLOCCommandError(\n                cmd=ex.filename,\n                returncode=127,\n                stderr=ex.strerror,\n            ) from ex\n</code></pre>"},{"location":"api/pycloc/command/#pycloc.command.CLOC.__version__","title":"<code>__version__ = properties.version</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Current version of <code>cloc</code>.</p>"},{"location":"api/pycloc/command/#pycloc.command.CLOC.__call__","title":"<code>__call__(argument, /, *arguments, asynchronous=False, workdir=None, encoding=None, errors=None, **flags)</code>","text":"<pre><code>__call__(\n    argument: AnyPath,\n    /,\n    *arguments: AnyPath,\n    asynchronous: Literal[False] = False,\n    workdir: Optional[AnyPath] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = None,\n    **flags: FlagValue,\n) -&gt; str\n</code></pre><pre><code>__call__(\n    argument: AnyPath,\n    /,\n    *arguments: AnyPath,\n    asynchronous: Literal[True] = True,\n    workdir: Optional[AnyPath] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = None,\n    **flags: FlagValue,\n) -&gt; str\n</code></pre> <p>Execute <code>cloc</code> command with the specified arguments and flags.</p> <p>Parameters:</p> Name Type Description Default <code>argument</code> <code>AnyPath</code> <p>Required positional argument to pass to the command.</p> required <code>*arguments</code> <code>AnyPath</code> <p>Additional positional arguments to pass to the command.</p> <code>()</code> <code>asynchronous</code> <code>bool</code> <p>Whether to execute the command asynchronously.</p> <code>False</code> <code>workdir</code> <code>Optional[AnyPath]</code> <p>Optional working directory for this execution.</p> <code>None</code> <code>encoding</code> <code>Optional[str]</code> <p>Optional text encoding for parsing output.</p> <code>None</code> <code>errors</code> <code>Optional[str]</code> <p>Optional error handling strategy for encoding issues.</p> <code>None</code> <code>**flags</code> <code>FlagValue</code> <p>Additional command-line flags for this execution only.</p> <code>{}</code> <p>Returns:</p> Type Description <code>CommandOutput</code> <p>Output from the <code>cloc</code> command, either as a string or as an <code>Awaitable</code> string.</p> Note <p>Warning messages from the output are logged but will not result in a raised exception.</p> <p>Raises:</p> Type Description <code>CLOCDependencyError</code> <p>If Perl is not available on the system.</p> <code>CLOCCommandError</code> <p>If the <code>cloc</code> command fails or returns non-zero exit code.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from tempfile import NamedTemporaryFile\n&gt;&gt;&gt; from pycloc import CLOC\n&gt;&gt;&gt; with NamedTemporaryFile(suffix=\".md\", mode=\"w\") as buffer:\n...     _ = buffer.write(\"Hello, CLOC!\")\n...     buffer.flush()\n...     cloc = CLOC(json=True)\n...     output = cloc(buffer.name)\n...     result = json.loads(output)\n...     result[\"Markdown\"][\"code\"]\n1\n</code></pre> Source code in <code>src/pycloc/command.py</code> <pre><code>def __call__(\n    self,\n    argument: AnyPath,\n    /,\n    *arguments: AnyPath,\n    asynchronous: bool = False,\n    workdir: Optional[AnyPath] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = None,\n    **flags: FlagValue,\n) -&gt; CommandOutput:\n    \"\"\"\n    Execute ``cloc`` command with the specified arguments and flags.\n\n    Args:\n        argument: Required positional argument to pass to the command.\n        *arguments: Additional positional arguments to pass to the command.\n        asynchronous: Whether to execute the command asynchronously.\n        workdir: Optional working directory for this execution.\n        encoding: Optional text encoding for parsing output.\n        errors: Optional error handling strategy for encoding issues.\n        **flags: Additional command-line flags for this execution only.\n\n    Returns:\n        Output from the ``cloc`` command, either as a string or as an ``Awaitable`` string.\n\n    Note:\n        Warning messages from the output are logged but will not result in a raised exception.\n\n    Raises:\n        CLOCDependencyError: If [Perl](https://www.perl.org) is not available on the system.\n        CLOCCommandError: If the ``cloc`` command fails or returns non-zero exit code.\n\n    Examples:\n        &gt;&gt;&gt; import json\n        &gt;&gt;&gt; from tempfile import NamedTemporaryFile\n        &gt;&gt;&gt; from pycloc import CLOC\n        &gt;&gt;&gt; with NamedTemporaryFile(suffix=\".md\", mode=\"w\") as buffer:\n        ...     _ = buffer.write(\"Hello, CLOC!\")\n        ...     buffer.flush()\n        ...     cloc = CLOC(json=True)\n        ...     output = cloc(buffer.name)\n        ...     result = json.loads(output)\n        ...     result[\"Markdown\"][\"code\"]\n        1\n    \"\"\"\n    if not perl():\n        raise CLOCDependencyError(\"Perl is not available!\")\n    try:\n        return run(\n            executable=script(),\n            cwd=(self.workdir or workdir),\n            arguments=[argument, *arguments],\n            flags=(self._flags.copy() | flags).items(),\n            encoding=(self.encoding or encoding),\n            errors=(self.errors or errors),\n            asynchronous=asynchronous,\n        )\n    except CalledProcessError as ex:\n        raise CLOCCommandError(\n            cmd=ex.cmd,\n            returncode=ex.returncode,\n            output=ex.output,\n            stderr=ex.stderr,\n        ) from None\n    except (\n        FileNotFoundError,\n        PermissionError,\n    ) as ex:\n        raise CLOCCommandError(\n            cmd=ex.filename,\n            returncode=127,\n            stderr=ex.strerror,\n        ) from ex\n</code></pre>"},{"location":"api/pycloc/exceptions/","title":"exceptions","text":"<p>Hierarchy of exceptions raised during the execution of the <code>cloc</code> command.</p> <p>Classes:</p> Name Description <code>CLOCError</code> <p>Base exception class for all errors related to <code>cloc</code>.</p> <code>CLOCArgumentError</code> <p>Base exception for argument-related errors in <code>cloc</code> execution.</p> <code>CLOCArgumentNameError</code> <p>Raised when an invalid flag name is provided to <code>cloc</code>.</p> <code>CLOCArgumentTypeError</code> <p>Raised when a value of an unsupported type is specified for a flag.</p> <code>CLOCCommandError</code> <p>Raised when execution of a <code>cloc</code> command fails.</p> <code>CLOCDependencyError</code> <p>Raised when required runtime dependencies external to the Python environment are not available.</p>"},{"location":"api/pycloc/exceptions/#pycloc.exceptions.CLOCArgumentError","title":"<code>CLOCArgumentError</code>","text":"<p>               Bases: <code>CLOCError</code></p> <p>Base exception for argument-related errors in <code>cloc</code> execution.</p> Source code in <code>src/pycloc/exceptions.py</code> <pre><code>class CLOCArgumentError(CLOCError):\n    \"\"\"Base exception for argument-related errors in ``cloc`` execution.\"\"\"\n</code></pre>"},{"location":"api/pycloc/exceptions/#pycloc.exceptions.CLOCArgumentNameError","title":"<code>CLOCArgumentNameError</code>","text":"<p>               Bases: <code>CLOCArgumentError</code>, <code>ValueError</code></p> <p>Raised when an invalid flag name is provided to <code>cloc</code>.</p> Notes <p>Raised in response to a serialization error caused by an invalid flag name. Will not manifest as a result of an unknown flag being passed to <code>cloc</code>. In those cases, a <code>CLOCCommandError</code> will be raised instead.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Flag name that caused the error.</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Flag name that caused the error.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pycloc import CLOC\n&gt;&gt;&gt; cloc = CLOC()\n&gt;&gt;&gt; setattr(cloc, \"Flag names can't have spaces!\", 0)\n&gt;&gt;&gt; cloc(\".\")\nTraceback (most recent call last):\n    ...\npycloc.exceptions.CLOCArgumentNameError: Invalid name: 'Flag names can't have spaces!'\n</code></pre> Source code in <code>src/pycloc/exceptions.py</code> <pre><code>class CLOCArgumentNameError(CLOCArgumentError, ValueError):\n    \"\"\"\n    Raised when an invalid flag name is provided to ``cloc``.\n\n    Notes:\n        Raised in response to a serialization error caused by an invalid flag name.\n        Will not manifest as a result of an unknown flag being passed to ``cloc``.\n        In those cases, a ``CLOCCommandError`` will be raised instead.\n\n    Args:\n        name: Flag name that caused the error.\n\n    Attributes:\n        name (str): Flag name that caused the error.\n\n    Examples:\n        &gt;&gt;&gt; from pycloc import CLOC\n        &gt;&gt;&gt; cloc = CLOC()\n        &gt;&gt;&gt; setattr(cloc, \"Flag names can't have spaces!\", 0)\n        &gt;&gt;&gt; cloc(\".\")\n        Traceback (most recent call last):\n            ...\n        pycloc.exceptions.CLOCArgumentNameError: Invalid name: 'Flag names can't have spaces!'\n    \"\"\"\n\n    def __init__(self, name: str):\n        self._name: str = name\n\n    def __str__(self):\n        return f\"Invalid name: '{self.name}'\"\n\n    @property\n    def name(self) -&gt; str:\n        return self._name\n</code></pre>"},{"location":"api/pycloc/exceptions/#pycloc.exceptions.CLOCArgumentTypeError","title":"<code>CLOCArgumentTypeError</code>","text":"<p>               Bases: <code>CLOCArgumentError</code>, <code>TypeError</code></p> <p>Raised when a value of an unsupported type is specified for a flag.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>Value that caused the error.</p> required <p>Attributes:</p> Name Type Description <code>type</code> <code>Type[T]</code> <p>Type of the invalid value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pycloc import CLOC\n&gt;&gt;&gt; cloc = CLOC(flag=object())\n&gt;&gt;&gt; cloc(\".\")\nTraceback (most recent call last):\n    ...\npycloc.exceptions.CLOCArgumentTypeError: Invalid type: 'object'\n</code></pre> Source code in <code>src/pycloc/exceptions.py</code> <pre><code>class CLOCArgumentTypeError(CLOCArgumentError, TypeError):\n    \"\"\"\n    Raised when a value of an unsupported type is specified for a flag.\n\n    Args:\n        value: Value that caused the error.\n\n    Attributes:\n        type: Type of the invalid value.\n\n    Examples:\n        &gt;&gt;&gt; from pycloc import CLOC\n        &gt;&gt;&gt; cloc = CLOC(flag=object())\n        &gt;&gt;&gt; cloc(\".\")\n        Traceback (most recent call last):\n            ...\n        pycloc.exceptions.CLOCArgumentTypeError: Invalid type: 'object'\n    \"\"\"\n\n    def __init__(self, value: T):\n        self._type: Type[T] = type(value)\n\n    def __str__(self):\n        return f\"Invalid type: '{self.type.__name__}'\"\n\n    @property\n    def type(self) -&gt; Type[T]:\n        return self._type\n</code></pre>"},{"location":"api/pycloc/exceptions/#pycloc.exceptions.CLOCCommandError","title":"<code>CLOCCommandError</code>","text":"<p>               Bases: <code>CLOCError</code>, <code>CalledProcessError</code></p> <p>Raised when execution of a <code>cloc</code> command fails.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pycloc import CLOCCommandError, CLOC\n&gt;&gt;&gt; try:\n...     CLOC(unsupported=1)(\".\")\n... except CLOCCommandError as ex:\n...     ex.returncode\n2\n</code></pre> Source code in <code>src/pycloc/exceptions.py</code> <pre><code>class CLOCCommandError(CLOCError, CalledProcessError):\n    \"\"\"\n    Raised when execution of a ``cloc`` command fails.\n\n    Examples:\n        &gt;&gt;&gt; from pycloc import CLOCCommandError, CLOC\n        &gt;&gt;&gt; try:\n        ...     CLOC(unsupported=1)(\".\")\n        ... except CLOCCommandError as ex:\n        ...     ex.returncode\n        2\n    \"\"\"\n</code></pre>"},{"location":"api/pycloc/exceptions/#pycloc.exceptions.CLOCDependencyError","title":"<code>CLOCDependencyError</code>","text":"<p>               Bases: <code>CLOCError</code>, <code>OSError</code></p> <p>Raised when required runtime dependencies external to the Python environment are not available.</p> Notes <p>An example of an external dependency is a user-installed program or system package. Currently, the absence of a Perl interpreter is the only cause for this error.</p> Source code in <code>src/pycloc/exceptions.py</code> <pre><code>class CLOCDependencyError(CLOCError, OSError):\n    \"\"\"\n    Raised when required runtime dependencies external to the Python environment are not available.\n\n    Notes:\n        An example of an external dependency is a user-installed program or system package.\n        Currently, the absence of a [Perl](https://www.perl.org) interpreter\n        is the only cause for this error.\n    \"\"\"\n</code></pre>"},{"location":"api/pycloc/exceptions/#pycloc.exceptions.CLOCError","title":"<code>CLOCError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception class for all errors related to <code>cloc</code>.</p> Source code in <code>src/pycloc/exceptions.py</code> <pre><code>class CLOCError(Exception):\n    \"\"\"Base exception class for all errors related to ``cloc``.\"\"\"\n</code></pre>"}]}